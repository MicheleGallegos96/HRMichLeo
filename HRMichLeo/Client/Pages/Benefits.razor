@page "/Benefits"
@inject HttpClient Http
@using HRMichLeo.Shared.Models
@using System.ComponentModel
@using System.Collections

<PageTitle>Benefits</PageTitle>

<Grid TItem="Benefit"
      DataProvider="BenefitsDataProvider"
      Class="table table-hover table-bordered table-striped"
      AllowFiltering="true"
      Responsive="true"
      ItemsPerPageText="20"
      PageSizeSelectorItems="new int[]{10}"
      PaginationItemsTextFormat="{0}"
      >
    <GridColumn TItem="Benefit" HeaderText="Descrizione" PropertyName="DescrizioneBenefit">
        @context.DescrizioneBenefit
    </GridColumn>
    <GridColumn TItem="Benefit" HeaderText="Attivo?" PropertyName="AttivoBenefit">
        @context.AttivoBenefit
    </GridColumn>
    <GridColumn TItem="Benefit" Filterable="false" HeaderText="Elimina" >
        <Button Color="ButtonColor.Danger" @onclick="() => DeleteBenefit(context.Id)"> Elimina </Button>
    </GridColumn>
    <GridColumn TItem="Benefit" Filterable="false" HeaderText="Modifica">
        <Button Color="ButtonColor.Warning"> Modifica </Button>
    </GridColumn>

</Grid>
<Modal @ref="_modal" Title="Inserisci Benefit">

    <BodyTemplate>
        Inserisci un Nuovo Benefit:
        <EditForm Model="_NewBenefit">

        <div><label>
            Descrizione Benefit:
            <InputText @bind-Value="_NewBenefit!.DescrizioneBenefit"></InputText>
        </label></div>
        <div><label>
            Benefit attivo?
            <InputCheckbox @bind-Value="_NewBenefit!.AttivoBenefit"></InputCheckbox>

        </label></div>
        </EditForm>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Chiudi</Button>
        <Button Color="ButtonColor.Success"@onclick="AddNew">Aggiungi</Button>
    </FooterTemplate>
</Modal>
<div>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick"> Aggiungi Nuovo </Button>
</div>
@code {
    private IEnumerable<Benefit>? _benefits;
    private Modal _modal = new();
    private Benefit? _NewBenefit { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetBenefits();

    }
    private async Task OnShowModalClick()
    {
        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }
    private async Task AddNew()
    {
        await Http.PostAsJsonAsync("api/Benefit/Create",_NewBenefit);
        await _modal.HideAsync();
    }
    private async Task<GridDataProviderResult<Benefit>> BenefitsDataProvider(GridDataProviderRequest<Benefit> request)
    {
        // if (_benefits is null)
        _benefits = await GetBenefits();
        return await Task.FromResult(request.ApplyTo(_benefits));
    }

    private async Task DeleteBenefit(Guid id)
    {
        await Http.DeleteAsync($"api/Benefit/{id}");
    }

    private async Task<IEnumerable<Benefit>> GetBenefits()
    {
        var result = await Http.GetFromJsonAsync<IEnumerable<Benefit>>("api/benefit");
        return result!;
    }
}
