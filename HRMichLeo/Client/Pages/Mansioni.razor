@page "/Mansioni"
@inject HttpClient Http
@using HRMichLeo.Shared.Models
@using System.ComponentModel
@using System.Collections
@using Microsoft.EntityFrameworkCore.Infrastructure

<PageTitle>Mansioni</PageTitle>
<head>
    <link rel="stylesheet" href="css/app.css" />
</head>
<h1 class="h1titoli"><span class="spantitoli">M</span>ansioni</h1>
<Grid @ref="_grid" TItem="Mansione"
      DataProvider="MansioniDataProvider"
      Class="table table-hover table-bordered table-striped"
      AllowFiltering="true"
      Responsive="true"
      ItemsPerPageText="20"
      PageSizeSelectorItems="new int[]{10}"
      PaginationItemsTextFormat="{0}" >
    <GridColumn TItem="Mansione" HeaderText="Descrizione" PropertyName="DescrizioneMansione">
        @context.DescrizioneMansione
    </GridColumn>
    <GridColumn TItem="Mansione" HeaderText="Attivo?" PropertyName="AttivoMansione">
        @context.AttivoMansione
    </GridColumn>
    <GridColumn TItem="Mansione" Filterable="false" HeaderText="Elimina" >
        <Button Color="ButtonColor.Danger" @onclick="() => DeleteMansione(context.Id)" > Elimina </Button>
    </GridColumn>
    <GridColumn TItem="Mansione" Filterable="false" HeaderText="Modifica">
        <Button Color="ButtonColor.Success" @onclick="() => ShowModalUpdate(context.Id,context)"> Modifica </Button>
    </GridColumn>
    
</Grid>

<Modal @ref="_modal" Title="Mansioni">

    <BodyTemplate>
        @if (!_updateModal)
        {
            <EditForm Model="_updateMansione">
                <div>
                    <label>
                        Modifica Descrizione:
                        <InputText @bind-Value="_updateMansione.DescrizioneMansione"></InputText>
                    </label>
                </div>

                <div>
                    <label>
                        Attivo?
                        <InputCheckbox @bind-Value="_updateMansione.AttivoMansione"></InputCheckbox>
                    </label>
                </div>
            </EditForm>
        }
        else
        {
            <EditForm Model="_newMansione">

                <div>
                    <label>
                        Descrizione Mansione:
                        <InputText @bind-Value="_newMansione.DescrizioneMansione"></InputText>
                    </label>
                </div>
                <div>
                    <label>
                        Mansione attiva?
                        <InputCheckbox @bind-Value="_newMansione!.AttivoMansione"></InputCheckbox>

                    </label>
                </div>
            </EditForm>
        }


    </BodyTemplate>
    <FooterTemplate>
        @if (!_updateModal)
        {
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Chiudi</Button>
            <Button Color="ButtonColor.Warning" @onclick="() => UpdateMansione(_updateMansione.Id)"> Modifica </Button>

        }
        else
        {
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Chiudi</Button>
            <Button Color="ButtonColor.Success" @onclick="AddNew">Aggiungi</Button>
        }

    </FooterTemplate>
</Modal>
<div>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick"> Aggiungi Nuovo </Button>
</div>
@code {
    Grid<Mansione>? _grid;
    private IEnumerable<Mansione>? _mansioni;
    private Modal _modal = new();
    private bool _updateModal=false;
    private Mansione _newMansione { get; set; } = new();
    private Mansione _updateMansione { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetMansioni();

    }
    private async Task OnShowModalClick()
    {
        _updateModal = true;
        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        _updateModal = false;
        await _modal.HideAsync();

    }

    private async Task AddNew()
    {
        if (_newMansione!.DescrizioneMansione != null!)
        {
            await Http.PostAsJsonAsync("api/Mansione/Create", _newMansione);
            await _grid!.RefreshDataAsync();
            await OnHideModalClick();
        }
    }

    private async Task<GridDataProviderResult<Mansione>> MansioniDataProvider(GridDataProviderRequest<Mansione> request)
    {
        // if (_mansioni is null)
        _mansioni = await GetMansioni();
        return await Task.FromResult(request.ApplyTo(_mansioni));
    }

    private async Task DeleteMansione(Guid id)
    {
        await Http.DeleteAsync($"api/Mansione/{id}");
        await _grid!.RefreshDataAsync();
    }

    private async Task ShowModalUpdate(Guid id, Mansione contextmansione)
    {
        await _modal.ShowAsync();
        await Http.GetFromJsonAsync<Mansione>($"api/Mansione/{id}");
        _updateMansione.Id = id;
        _updateMansione.DescrizioneMansione = contextmansione.DescrizioneMansione;
        _updateMansione.AttivoMansione = contextmansione.AttivoMansione;

    }

    private async Task UpdateMansione(Guid id)
    {
        await Http.PutAsJsonAsync($"api/Mansione/{id}", _updateMansione);
        await _grid!.RefreshDataAsync();
        await _modal.HideAsync();
    }

    private async Task<IEnumerable<Mansione>> GetMansioni()
    {
        var result = await Http.GetFromJsonAsync<IEnumerable<Mansione>>("api/mansione");
        return result!;
    }
}
